stages:
  - build_and_test
  - deploy
  - complete

# If you are looking for a place where to add 'UNITY_LICENSE_FILE' and other secrets, please visit your project's gitlab page:
# settings > CI/CD > Variables instead
variables:
  BUILD_NAME: daily-temp
  UNITY_ACTIVATION_FILE: ./unity3d.alf
  UNITY_VERSION: '2021.1.13f1'
  IMAGE: unityci/editor # https://hub.docker.com/r/unityci/editor
  IMAGE_VERSION: '0.15' # https://github.com/game-ci/docker/releases
  UNITY_DIR: $CI_PROJECT_DIR # this needs to be an absolute path. Defaults to the root of your tree.

image: $IMAGE:$UNITY_VERSION-base-$IMAGE_VERSION

.unity_before_script: &unity_before_script
  before_script:
    - chmod +x ./ci/before_script.sh && ./ci/before_script.sh

.cache: &cache
  cache:
    key: '$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-$TEST_PLATFORM'
    paths:
      - $UNITY_DIR/Library/

.license: &license
  rules:
    - if: '$UNITY_LICENSE != null'
      when: always

.unity_defaults: &unity_defaults
  <<:
    - *unity_before_script
    - *cache
    - *license

# run this job when you need to request a license
# you may need to follow activation steps from documentation
get-activation-file:
  rules:
    - if: '$UNITY_LICENSE == null'
      when: manual
  stage: build_and_test
  tags:
    - docker-executor-normandy
  script:
    - chmod +x ./ci/get_activation_file.sh && ./ci/get_activation_file.sh
  artifacts:
    paths:
      - $UNITY_ACTIVATION_FILE
    expire_in: 10 min # Expiring this as artifacts may contain sensitive data and should not be kept public

.test: &test
  stage: build_and_test
  <<: *unity_defaults
  script:
    - chmod +x ./ci/test.sh && ./ci/test.sh
  artifacts:
    when: always
    expire_in: 3 hours
  # https://gitlab.com/gableroux/unity3d-gitlab-ci-example/-/issues/83
  # you may need to remove or replace these to fit your need if you are using your own runners
  tags:
    - docker-executor-normandy
  coverage: /<Linecoverage>(.*?)</Linecoverage>/

# test-playmode:
#   <<: *test
#   variables:
#     TEST_PLATFORM: playmode

# test-editmode:
#   <<: *test
#   variables:
#     TEST_PLATFORM: editmode

# uncomment the following blocks if you'd like to have junit reporting unity test results in gitlab
# We currently have the following issue which prevents it from working right now, but you can give
# a hand if you're interested in this feature:
# https://gitlab.com/gableroux/unity3d-gitlab-ci-example/-/issues/151

# .test-with-junit-reports: &test-with-junit-reports
#   stage: build_and_test
#   <<: *unity_defaults
#   script:
#     # This could be made faster by adding these packages to base image or running in a separate job (and step)
#     # We could use an image with these two depencencies only and only do the saxonb-xslt command on
#     # previous job's artifacts
#     - apt-get update && apt-get install -y default-jre libsaxonb-java
#     - chmod +x ./ci/test.sh && ./ci/test.sh
#     - saxonb-xslt -s $UNITY_DIR/$TEST_PLATFORM-results.xml -xsl $CI_PROJECT_DIR/ci/nunit-transforms/nunit3-junit.xslt >$UNITY_DIR/$TEST_PLATFORM-junit-results.xml
#   artifacts:
#     when: always
#     reports:
#       junit:
#         - $UNITY_DIR/$TEST_PLATFORM-junit-results.xml
#         - $UNITY_DIR/$TEST_PLATFORM-coverage/
#     expire_in: 3 hours
#   # https://gitlab.com/gableroux/unity3d-gitlab-ci-example/-/issues/83
#   # you may need to remove or replace these to fit your need if you are using your own runners
#   tags:
#     - docker-executor-normandy
#   coverage: /<Linecoverage>(.*?)</Linecoverage>/

# test-playmode-with-junit-reports:
#   <<: *test-with-junit-reports
#   variables:
#     TEST_PLATFORM: playmode

# test-editmode-with-junit-reports:
#   <<: *test-with-junit-reports
#   variables:
#     TEST_PLATFORM: editmode

.build: &build
  stage: build_and_test
  <<: *unity_defaults
  script:
    - echo $CI_COMMIT_REF_NAME
    - >
      if [[ "$CI_COMMIT_REF_NAME" == "pre-dev" ]]; then
        chmod +x ./ci/build.sh && ./ci/build.sh
      elif [[ "$CI_COMMIT_REF_NAME" == "dev" || "$CI_COMMIT_REF_NAME" == "stg" || "$CI_COMMIT_REF_NAME" == "pro" ]]; then
        chmod +x ./ci/buildWithAuth.sh && ./ci/buildWithAuth.sh
      fi
  artifacts:
    paths:
      - $UNITY_DIR/Builds/
  # https://gitlab.com/gableroux/unity3d-gitlab-ci-example/-/issues/83
  # you may need to remove or replace these to fit your need if you are using your own runners
  tags:
    - docker-executor-normandy

# build-StandaloneLinux64:
#   <<: *build
#   variables:
#     BUILD_TARGET: StandaloneLinux64

# build-StandaloneLinux64-il2cpp:
#   <<: *build
#   image: $IMAGE:$UNITY_VERSION-linux-il2cpp-$IMAGE_VERSION
#   variables:
#     BUILD_TARGET: StandaloneLinux64
#     SCRIPTING_BACKEND: IL2CPP

# build-StandaloneOSX:
#   <<: *build
#   image: $IMAGE:$UNITY_VERSION-mac-mono-$IMAGE_VERSION
#   variables:
#     BUILD_TARGET: StandaloneOSX

#Note: build target names changed in recent versions, use this for versions < 2017.2:
# build-StandaloneOSXUniversal:
#   <<: *build
#   variables:
#     BUILD_TARGET: StandaloneOSXUniversal

# build-StandaloneWindows64:
#   <<: *build
#   image: $IMAGE:$UNITY_VERSION-windows-mono-$IMAGE_VERSION
#   variables:
#     BUILD_TARGET: StandaloneWindows64

# For webgl support, you need to set Compression Format to Disabled for v0.9. See https://github.com/game-ci/docker/issues/75
build-WebGL:
  <<: *build
  image: $IMAGE:$UNITY_VERSION-webgl-$IMAGE_VERSION
  # Temporary workaround for https://github.com/game-ci/docker/releases/tag/v0.9 and webgl support in current project to prevent errors with missing ffmpeg
  before_script:
    - chmod +x ./ci/before_script.sh && ./ci/before_script.sh
    - apt-get update && apt-get install ffmpeg -y
    # Prepare sshkey to access Normandy
    - echo "$OFFICE_NORMANDY_SSH_KEY" > normandy.pem
    - chmod 400 ./normandy.pem
    # Copy files from share drive folder to a temp location
    - echo $USER
    - mkdir hello
    - >
      if [ "$CI_COMMIT_REF_NAME" == "pre-dev" ]; then
        scp -r -i ./normandy.pem -o "StrictHostKeyChecking no" normandy@192.168.0.8:D:/MilkCargo/$USER ./hello
      elif [[ "$CI_COMMIT_REF_NAME" == "dev" || "$CI_COMMIT_REF_NAME" == "stg" || "$CI_COMMIT_REF_NAME" == "pro" ]]; then
        rm -rf ./hello/$MISSION/$EPISODE && mkdir -p ./hello/$MISSION/$EPISODE
        scp -r -i ./normandy.pem -o "StrictHostKeyChecking no" normandy@192.168.0.8:D:/DailyDeploy/$MISSION/$EPISODE/* ./hello/$MISSION/$EPISODE
      fi
    # - ls ./hello
    # - ls ./hello/$MISSION
    # - ls ./hello/$MISSION/$EPISODE
    # Clear some destinations
    - rm -rf ./Assets/Scripts/_FairyGUI/Daily
    - if [ -d "./Assets/Resources/Sound" ]; then rm -rf ./Assets/Resources/Sound; fi
    - if [ -d "./Assets/Resources/Localization" ]; then rm -rf ./Assets/Resources/Localization; fi
    - if [ -f "./Assets/Resources/PackageName.txt" ]; then rm -rf ./Assets/Resources/PackageName.txt; fi
    - if [ -f "./Assets/Resources/AudioData.txt" ]; then rm -rf ./Assets/Resources/AudioData.txt; fi
    - rm -rf ./Assets/Resources/_FairyGUI/*
    # And distribute files to appropriate destinations
    - >
      if [ "$CI_COMMIT_REF_NAME" == "pre-dev" ]; then
        mv hello/$USER/Daily ./Assets/Scripts/_FairyGUI/Daily
        if [ -d "hello/$USER/Sound" ]; then mv hello/$USER/Sound ./Assets/Resources/Sound; fi
        if [ -d "hello/$USER/Localization" ]; then mv hello/$USER/Localization ./Assets/Resources/Localization; fi
        if [ -f "hello/$USER/PackageName.txt" ]; then mv hello/$USER/PackageName.txt ./Assets/Resources/PackageName.txt; fi
        if [ -f "hello/$USER/AudioData.txt" ]; then mv hello/$USER/AudioData.txt ./Assets/Resources/AudioData.txt; fi
        mv hello/$USER/* ./Assets/Resources/_FairyGUI
      elif [[ "$CI_COMMIT_REF_NAME" == "dev" || "$CI_COMMIT_REF_NAME" == "stg" || "$CI_COMMIT_REF_NAME" == "pro" ]]; then
        mv hello/$MISSION/$EPISODE/Daily ./Assets/Scripts/_FairyGUI/Daily
        if [ -d "hello/$MISSION/$EPISODE/Sound" ]; then mv hello/$MISSION/$EPISODE/Sound ./Assets/Resources/Sound; fi
        if [ -d "hello/$MISSION/$EPISODE/Localization" ]; then mv hello/$MISSION/$EPISODE/Localization ./Assets/Resources/Localization; fi
        if [ -f "hello/$MISSION/$EPISODE/PackageName.txt" ]; then mv hello/$MISSION/$EPISODE/PackageName.txt ./Assets/Resources/PackageName.txt; fi
        if [ -f "hello/$MISSION/$EPISODE/AudioData.txt" ]; then mv hello/$MISSION/$EPISODE/AudioData.txt ./Assets/Resources/AudioData.txt; fi
        mv hello/$MISSION/$EPISODE/* ./Assets/Resources/_FairyGUI
      fi
  variables:
    BUILD_TARGET: WebGL
  dependencies: []

# build-android:
#   <<: *build
#   image: $IMAGE:$UNITY_VERSION-android-$IMAGE_VERSION
#   variables:
#     BUILD_TARGET: Android
#     BUNDLE_VERSION_CODE: $CI_PIPELINE_IID
#     BUILD_APP_BUNDLE: "false"

# build-android-il2cpp:
#   <<: *build
#   image: $IMAGE:$UNITY_VERSION-android-$IMAGE_VERSION
#   variables:
#     BUILD_TARGET: Android
#     BUNDLE_VERSION_CODE: $CI_PIPELINE_IID
#     BUILD_APP_BUNDLE: "false"
#     SCRIPTING_BACKEND: IL2CPP

#deploy-android:
#  stage: deploy
#  image: ruby
#  script:
#    - cd $UNITY_DIR/Builds/Android
#    - echo $GPC_TOKEN > gpc_token.json
#    - gem install bundler
#    - bundle install
#    - fastlane supply --aab $BUILD_NAME.aab --track internal --package_name com.youcompany.yourgame --json_key ./gpc_token.json
#  needs: ["build-android"]

# build-ios-xcode:
#   <<: *build
#   image: $IMAGE:$UNITY_VERSION-ios-$IMAGE_VERSION
#   variables:
#     BUILD_TARGET: iOS

#build-and-deploy-ios:
#  stage: deploy
#  script:
#    - cd $UNITY_DIR/Builds/iOS/$BUILD_NAME
#    - pod install
#    - fastlane ios beta
#  tags:
#    - ios
#    - mac
#  needs: ["build-ios-xcode"]

pre-dev-ppwi-office-normandy:
  stage: deploy
  tags:
    - shell-executor-normandy
  script:
    - echo 'pre-dev-ppwi-office-normandy'
    - echo $MISSION
    - echo $EPISODE
    - echo $BUILD_NAME
    - echo $UNITY_DIR/Builds/WebGL/${BUILD_NAME}
    - ls $UNITY_DIR/Builds/WebGL/${BUILD_NAME}
    - echo "$OFFICE_NORMANDY_SSH_KEY" > normandy.pem
    - chmod 400 ./normandy.pem
    - ssh -o "StrictHostKeyChecking no" -i ./normandy.pem normandy@192.168.0.8 "bash -l; if [ ! -d "/mnt/c/Users/normandy/Desktop/pre-dev/html/unity/daily-missions/$MISSION" ]; then mkdir /mnt/c/Users/normandy/Desktop/pre-dev/html/unity/daily-missions/$MISSION; fi"
    - ssh -o "StrictHostKeyChecking no" -i ./normandy.pem normandy@192.168.0.8 "bash -l; rm -rf /mnt/c/Users/normandy/Desktop/pre-dev/html/unity/daily-missions/$MISSION/$EPISODE; mkdir /mnt/c/Users/normandy/Desktop/pre-dev/html/unity/daily-missions/$MISSION/$EPISODE"
    - scp -i ./normandy.pem -r  $UNITY_DIR/Builds/WebGL/${BUILD_NAME}/* normandy@192.168.0.8:C:/Users/normandy/Desktop/pre-dev/html/unity/daily-missions/$MISSION/$EPISODE
    - ssh -o "StrictHostKeyChecking no" -i ./normandy.pem normandy@192.168.0.8 "bash -l; mv /mnt/c/Users/normandy/Desktop/pre-dev/html/unity/daily-missions/$MISSION/$EPISODE/${BUILD_NAME}/* /mnt/c/Users/normandy/Desktop/pre-dev/html/unity/daily-missions/$MISSION/$EPISODE; rm -rf /mnt/c/Users/normandy/Desktop/pre-dev/html/unity/daily-missions/$MISSION/$EPISODE/${BUILD_NAME}"
    - ssh -o "StrictHostKeyChecking no" -i ./normandy.pem normandy@192.168.0.8 "bash -l; rm -rf /mnt/d/MilkCargo/$USER/*"
  artifacts:
    paths:
      - $UNITY_DIR/Builds/WebGL/${BUILD_NAME}
    expire_in: 1 hour
  environment:
    name: normandy
    url: https://unity.pre-dev.ppwi.world/unity/daily-missions/$MISSION/$EPISODE/index.html
  only:
    refs:
      - pre-dev
    variables:
      - $UNITY_LICENSE != null

dev-aliyun-hongkong:
  stage: deploy
  tags:
    - shell-executor-normandy
  script:
    - echo 'dev-aliyun-hongkong'
    - echo $MISSION
    - echo $EPISODE
    - echo $BUILD_NAME
    - echo $UNITY_DIR/Builds/WebGL/${BUILD_NAME}
    - ls $UNITY_DIR/Builds/WebGL/${BUILD_NAME}
    - echo "$OFFICE_NORMANDY_SSH_KEY" > normandy.pem
    - chmod 400 ./normandy.pem
    - echo "$HK_ALIYUN_SSH_KEY" > dev.pem
    - chmod 400 ./dev.pem
    - ssh -o "StrictHostKeyChecking no" -i ./dev.pem root@8.210.17.85 "if [ ! -d "/root/ppwiOverseaPublic/unity/daily-missions/$MISSION" ]; then mkdir /root/ppwiOverseaPublic/unity/daily-missions/$MISSION; fi"
    - ssh -o "StrictHostKeyChecking no" -i ./dev.pem root@8.210.17.85 "rm -rf /root/ppwiOverseaPublic/unity/daily-missions/$MISSION/$EPISODE; mkdir /root/ppwiOverseaPublic/unity/daily-missions/$MISSION/$EPISODE"
    - rsync -avP -e 'ssh -i ./dev.pem' $UNITY_DIR/Builds/WebGL/${BUILD_NAME}/* root@8.210.17.85:/root/ppwiOverseaPublic/unity/daily-missions/$MISSION/$EPISODE
    # - ssh -o "StrictHostKeyChecking no" -i ./normandy.pem normandy@192.168.0.8 "bash -l; rm -rf /mnt/d/MilkCargo/$USER/*"
  artifacts:
    paths:
      - $UNITY_DIR/Builds/WebGL/${BUILD_NAME}
    expire_in: 1 hour
  environment:
    name: normandy
    url: http://8.210.17.85/unity/daily-missions/$MISSION/$EPISODE/index.html
  only:
    refs:
      - dev
    variables:
      - $UNITY_LICENSE != null

stg-aliyun-beijing:
  stage: deploy
  tags:
    - shell-executor-normandy
  script:
    - echo 'stg-aliyun-beijing'
    - echo $MISSION
    - echo $EPISODE
    - echo $BUILD_NAME
    - echo $UNITY_DIR/Builds/WebGL/${BUILD_NAME}
    - ls $UNITY_DIR/Builds/WebGL/${BUILD_NAME}
    - echo "$OFFICE_NORMANDY_SSH_KEY" > normandy.pem
    - chmod 400 ./normandy.pem
    - echo "$STG_BEIJING_SSH_KEY" > stg.pem
    - chmod 400 ./stg.pem
    - echo "$GITLAB_RUNNER_ALIYUN_HK_SSH_KEY" > gitlab-runner.pem
    - chmod 400 ./gitlab-runner.pem
    - ssh -o "StrictHostKeyChecking no" -i ./gitlab-runner.pem root@47.242.157.199 "rm -rf /var/www/html/$CI_COMMIT_REF_NAME/unity/daily-missions/$MISSION/$EPISODE && mkdir -p /var/www/html/$CI_COMMIT_REF_NAME/unity/daily-missions/$MISSION/$EPISODE"
    - scp -i ./gitlab-runner.pem -r $UNITY_DIR/Builds/WebGL/${BUILD_NAME}/* root@47.242.157.199:/var/www/html/$CI_COMMIT_REF_NAME/unity/daily-missions/$MISSION/$EPISODE
    - scp -i ./gitlab-runner.pem ./stg.pem root@47.242.157.199:/root/stg.pem
    - ssh -o "StrictHostKeyChecking no" -i ./stg.pem root@39.107.95.8 "rm -rf /var/www/html/unity/daily-missions/$MISSION/$EPISODE && mkdir -p /var/www/html/unity/daily-missions/$MISSION/$EPISODE"
    - ssh -o "StrictHostKeyChecking no" -i ./gitlab-runner.pem root@47.242.157.199 "chmod 400 /root/stg.pem && rsync -avP -e 'ssh -i /root/stg.pem' /var/www/html/$CI_COMMIT_REF_NAME/unity/daily-missions/$MISSION/$EPISODE/* root@39.107.95.8:/var/www/html/unity/daily-missions/$MISSION/$EPISODE"
    - ssh -o "StrictHostKeyChecking no" -i ./gitlab-runner.pem root@47.242.157.199 "rm -rf /var/www/html/$CI_COMMIT_REF_NAME/unity/daily-missions/$MISSION/$EPISODE"
    # - ssh -o "StrictHostKeyChecking no" -i ./normandy.pem normandy@192.168.0.8 "bash -l; rm -rf /mnt/d/MilkCargo/$USER/*"
  artifacts:
    paths:
      - $UNITY_DIR/Builds/WebGL/${BUILD_NAME}
    expire_in: 1 hour
  environment:
    name: normandy
    url: https://assets.stg.milkcargo.cn/unity/daily-missions/$MISSION/$EPISODE/index.html
  only:
    refs:
      - stg
    variables:
      - $UNITY_LICENSE != null

pro-aliyun-beijing:
  stage: deploy
  tags:
    - shell-executor-normandy
  script:
    - echo 'pro-aliyun-beijing'
    - echo $MISSION
    - echo $EPISODE
    - echo $BUILD_NAME
    - echo $UNITY_DIR/Builds/WebGL/${BUILD_NAME}
    - ls $UNITY_DIR/Builds/WebGL/${BUILD_NAME}
    - echo "$OFFICE_NORMANDY_SSH_KEY" > normandy.pem
    - chmod 400 ./normandy.pem
    - echo "$BJ_PRO_ALIYUN_SSH_KEY" > pro.pem
    - chmod 400 ./pro.pem
    - echo "$GITLAB_RUNNER_ALIYUN_HK_SSH_KEY" > gitlab-runner.pem
    - chmod 400 ./gitlab-runner.pem
    - ssh -o "StrictHostKeyChecking no" -i ./gitlab-runner.pem root@47.242.157.199 "rm -rf /var/www/html/$CI_COMMIT_REF_NAME/unity/daily-missions/$MISSION/$EPISODE && mkdir -p /var/www/html/$CI_COMMIT_REF_NAME/unity/daily-missions/$MISSION/$EPISODE"
    - scp -i ./gitlab-runner.pem -r $UNITY_DIR/Builds/WebGL/${BUILD_NAME}/* root@47.242.157.199:/var/www/html/$CI_COMMIT_REF_NAME/unity/daily-missions/$MISSION/$EPISODE
    - scp -i ./gitlab-runner.pem ./pro.pem root@47.242.157.199:/root/pro.pem
    - ssh -o "StrictHostKeyChecking no" -i ./pro.pem root@39.97.116.200 "rm -rf /var/www/html/unity/daily-missions/$MISSION/$EPISODE && mkdir -p /var/www/html/unity/daily-missions/$MISSION/$EPISODE"
    - ssh -o "StrictHostKeyChecking no" -i ./gitlab-runner.pem root@47.242.157.199 "chmod 400 /root/pro.pem && rsync -avP -e 'ssh -i /root/pro.pem' /var/www/html/$CI_COMMIT_REF_NAME/unity/daily-missions/$MISSION/$EPISODE/* root@39.97.116.200:/var/www/html/unity/daily-missions/$MISSION/$EPISODE"
    - ssh -o "StrictHostKeyChecking no" -i ./gitlab-runner.pem root@47.242.157.199 "rm -rf /var/www/html/$CI_COMMIT_REF_NAME/unity/daily-missions/$MISSION/$EPISODE"
    # - ssh -o "StrictHostKeyChecking no" -i ./normandy.pem normandy@192.168.0.8 "bash -l; rm -rf /mnt/d/MilkCargo/$USER/*"
  artifacts:
    paths:
      - $UNITY_DIR/Builds/WebGL/${BUILD_NAME}
    expire_in: 1 hour
  environment:
    name: normandy
    url: https://assets.milkcargo.cn/unity/daily-missions/$MISSION/$EPISODE/index.html
  only:
    refs:
      - pro
    variables:
      - $UNITY_LICENSE != null

complete:
  stage: complete
  tags:
    - shell-executor-normandy
  script:
    - >
      if [ "$CI_COMMIT_REF_NAME" == "pre-dev" ]; then
        curl -X POST -H 'Content-type: application/json' --data '{"channel": "#gitlab-notification","username": "Normandy GitLab Runner","text": "[pipeline] daily-mission '$MISSION' '$EPISODE' at '$CI_COMMIT_REF_NAME' success. https://unity.pre-dev.ppwi.world/unity/daily-missions/'$MISSION'/'$EPISODE'/index.html","icon_emoji": "raised_hands"}' https://hooks.slack.com/services/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
      elif [ "$CI_COMMIT_REF_NAME" == "dev" ]; then
        curl -X POST -H 'Content-type: application/json' --data '{"channel": "#gitlab-notification","username": "Normandy GitLab Runner","text": "[pipeline] daily-mission '$MISSION' '$EPISODE' at '$CI_COMMIT_REF_NAME' success. http://8.210.17.85/unity/daily-missions/'$MISSION'/'$EPISODE'/index.html","icon_emoji": "raised_hands"}' https://hooks.slack.com/services/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
      elif [ "$CI_COMMIT_REF_NAME" == "stg" ]; then
        curl -X POST -H 'Content-type: application/json' --data '{"channel": "#gitlab-notification","username": "Normandy GitLab Runner","text": "[pipeline] daily-mission '$MISSION' '$EPISODE' at '$CI_COMMIT_REF_NAME' success. https://assets.stg.milkcargo.cn/unity/daily-missions/'$MISSION'/'$EPISODE'/index.html","icon_emoji": "raised_hands"}' https://hooks.slack.com/services/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
      elif [ "$CI_COMMIT_REF_NAME" == "pro" ]; then
        curl -X POST -H 'Content-type: application/json' --data '{"channel": "#gitlab-notification","username": "Normandy GitLab Runner","text": "[pipeline] daily-mission '$MISSION' '$EPISODE' at '$CI_COMMIT_REF_NAME' success. https://assets.milkcargo.cn/unity/daily-missions/'$MISSION'/'$EPISODE'/index.html","icon_emoji": "raised_hands"}' https://hooks.slack.com/services/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
      fi
  only:
    refs:
      - pre-dev
      - dev
      - stg
      - pro
    variables:
      - $UNITY_LICENSE != null

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$USER == null'
      when: never
    - if: '$MISSION == null'
      when: never
    - if: '$EPISODE == null'
      when: never
    - if: '$CI_COMMIT_REF_NAME == "pre-dev" || "dev" || "stg" || "pro"'
      when: always
